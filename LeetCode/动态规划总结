1.对自顶向下与自底向上的认识
  详情见LeetCode  139.  140.题
  NO:139 单词拆分I
  给定一个非空字符串 s 和一个包含非空单词的列表 wordDict，判定 拆分s 是否可以被空格拆分为一个或多个在字典中出现的单词。
  说明：
  拆分时可以重复使用字典中的单词。
  你可以假设字典中没有重复的单词。
  输入: s = "leetcode", wordDict = ["leet", "code"]
  输出: true
  解释: 返回 true 因为 "leetcode" 可以被拆分成 "leet code"。
  
  class Solution {
  public:
	bool wordBreak(string s, vector<string>& wordDict) {
        vector<bool> dp(s.size()+1, false);
        unordered_set<string> m(wordDict.begin(), wordDict.end());
        dp[0] = true;
        //获取最长字符串长度
        int maxWordLength = 0;
        for (int i = 0; i < wordDict.size(); ++i){
            maxWordLength = max(maxWordLength, (int)wordDict[i].size());
        }
        for (int i = 1; i <= s.size(); ++i){
            for (int j = max(i-maxWordLength, 0); j < i; ++j){
                if (dp[j] && m.find(s.substr(j, i-j)) != m.end()){
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[s.size()];
	}
 };
 
 这里采用了自底向上的方法，理由是这个题只需要输出是否能够成功分割，而不需要输出所有的分割情况。
 
 
 
 NO:140 单词拆分II
 给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，在字符串中增加空格来构建一个句子，使得句子中所有的单词都在词典中。返回所有这些可能的句子。

说明：

分隔时可以重复使用字典中的单词。
你可以假设字典中没有重复的单词。

输入:
s = "catsanddog"
wordDict = ["cat", "cats", "and", "sand", "dog"]
输出:
[
  "cats and dog",
  "cat sand dog"
]

class Solution {
    unordered_map<int, vector<string>> ans;
    unordered_set<string> wordSet;
    int maxLength = 0;
public:
    vector<string> wordBreak(string s, vector<string>& wordDict) {
        wordSet = unordered_set<string>(wordDict.begin(), wordDict.end());
        for(string word : wordSet){
            maxLength = maxLength > word.size() ? maxLength : word.size();
        }
        func(s, 0);
        return ans[0];
    }
    void func(string& s, int index){
        if(ans.find(index) == ans.end()){
            if(index == s.size()){
                ans[index] = {""};
                return;
            }
            ans[index] = {};
            for(int i = index + 1; i <= (s.size() < index + maxLength ? s.size() : index + maxLength); ++i){
                string word = s.substr(index, i - index);
                if(wordSet.find(word) != wordSet.end()){
                    func(s, i);
                    for(int j = 0; j < ans[i].size(); ++j){
                        ans[index].emplace_back(ans[i][j].empty() ? word : word + ' ' + ans[i][j]);
                    }
                }
            }
        }
    }
};

这个题采用了自顶向下的方法，因为要输出所有可能的情况，若使用自底向上的方法，假如无法拆分的话，会在底端花费大量时间遍历。
使用了maxLength这个变量去优化查询。这个优化在NO:139中也可使用。


综上：自底向上和自顶向下需要看具体要做的事情，根据是要输出能否成功还是所有情况来调整算法。
